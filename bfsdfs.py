# -*- coding: utf-8 -*-
"""BFSDFS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/184Ct6xCT0rRrFSgcqy8E-GISlyy6djOv

# **Dictionary**

We made an undirected graph
"""

pakistan_cities = {
    'Sargodha': ['Pindi'],
    'Pindi': ['Sargodha', 'Okara'],
    'Okara': ['Pindi', 'Murree', 'Quetta'],
    'Murree': ['Okara', 'Kohat'],
    'Quetta': ['Okara'],
    'Kohat': ['Murree', 'Mansehra'],
    'Mansehra': ['Kohat', 'Taxila'],
    'Taxila': ['Mansehra']
}

from collections import deque
def bfs_shortest_path1(graph1, start1, goal1):

    queue1 = deque([[start1]])

    # Keep track of visited cities to avoid revisiting
    visited1 = set()

#Keep looping while there are paths left to explore.
    while queue1:
        # Remove the first path from the queue (FIFO)
        path1 = queue1.popleft()
        current_city1 = path1[-1]  # Get the last node in the path, which is where you are now.

        # If the goal is reached, return this path immediately
        if current_city1 == goal1:
            return path1

        # If the current city has not been visited yet
        if current_city1 not in visited1:
            visited1.add(current_city1)  # Mark it as visited

            # Loop through all neighboring cities
            #key = current_city → the city we are currently exploring.
            #default_value = [] → an empty list.
            #This is a for loop that iterates through every neighbor of the current_city.
            #Each loop step gives you one neighbor at a time.
            #If current_city = 'A', and 'A' is connected to 'B' and 'C':
            for neighbor1 in graph1.get(current_city1, []):
                # Create a new path with the neighbor added
                #Makes a safe copy of the current path so changes won’t affect the original one
                new_path1 = list(path1)  # Copy the current path
                #Extends the copied path by adding the neighbor city to the end.
                new_path1.append(neighbor1)

                # Add the new path to the queue
                #Why needed?
              #Keeps BFS exploring paths in order, ensuring the shortest path is found.
                queue1.append(new_path1)


    # If we exhaust the queue and never find the goal
    #return None means no path exists, so the function stops and gives back 'nothing found' as the result."
    return None
#This function is like a map explorer that starts at one city
# and keeps going deeper step-by-step to find the goal, while remembering the path and visited cities.
def dfs_path1(graph1, start1, goal1, path1=None, visited1=None):

    # Initialize path and visited on the first call
    "path starts as an empty list to record the route you take."
    if path1 is None:
        path1 = []
        "visited starts as an empty set to remember visited places so you don't repeat them."
    if visited1 is None:
        visited1 = set()

    # Add current city to the path and mark as visited
    #Record the starting point in your route.
    path1.append(start1)
    #Mark it as visited to avoid cycles.
    visited1.add(start1)

    # If goal is reached, return the path
    if start1 == goal1:
        return path1

    # Explore each neighbor recursively
    #Gets all neighbors of the current node. Returns [] if no neighbors exist.
    for neighbor1 in graph1.get(start1, []):
        if neighbor1 not in visited1:
# Make recursive DFS call
# graph The entire map of nodes and connections.
#neighbor       The next node to explore.
#goal   The final target node to reach.
#path.copy()    Safe copy of the current route.
#visited.copy() Safe copy of visited nodes to prevent loops.
#result = dfs_path(...) Go deeper into the graph and store the result.
            result1 = dfs_path1(graph1, neighbor1, goal1, path1.copy(), visited1.copy())

            # If a path is found, return it immediately
            if result1:
                return result1

    # If no path found from this city, return None
    return None

# -------------------------------------------
# Step 4: Testing the functions
# -------------------------------------------
start_city1 = "Murree"
goal_city1 = "Okara"


# BFS for the shortest path
bfs_result1 = bfs_shortest_path1(pakistan_cities, start_city1, goal_city1)
print("BFS Shortest Path from Karachi to Peshawar:", bfs_result1)
# DFS for any path
dfs_result1 = dfs_path1(pakistan_cities, start_city1, goal_city1)
print("DFS Path from Karachi to Peshawar:", dfs_result1)